//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: MarioSt_WorldData.bt
// Author: PistonMiner aka Linus S.
// Revision: 1.0
// Purpose: TTYD map main /d data
//--------------------------------------

BigEndian();

typedef unsigned byte uint8;
typedef signed byte int8;

local uint32 addrBase;
local uint tableNamesBase;

typedef struct(uint _scale)
{
    local uint scale = _scale;
    int16 raw;
} scaled16<read=scaled16_read>;

string scaled16_read(const scaled16 &val)
{
    local string out;
    SPrintf(out, "%.2f", val.raw / Pow(2, val.scale));
    return out;
}

typedef struct(uint _scale)
{
    local uint scale = _scale;
    int8 raw;
} scaled8<read=scaled8_read>;

string scaled8_read(const scaled8 &val)
{
    local string out;
    SPrintf(out, "%.2f", val.raw / Pow(2, val.scale));
    return out;
}

typedef struct(local uint scale)
{
    scaled16 x(scale), y(scale), z(scale);
} Vector3s16<read=Vector3s16_read,optimize=false>;

string Vector3s16_read(const Vector3s16 &vec)
{
    local string out;
    SPrintf(out, "%s; %s; %s",
        scaled16_read(vec.x),
        scaled16_read(vec.y),
        scaled16_read(vec.z));
    return out;
}

typedef struct(local uint scale)
{
    scaled16 x(scale), y(scale);
} Vector2s16<read=Vector2s16_read,optimize=false>;

string Vector2s16_read(const Vector2s16 &vec)
{
    local string out;
    SPrintf(out, "%s; %s",
        scaled16_read(vec.x),
        scaled16_read(vec.y));
    return out;
}

typedef struct(local uint scale)
{
    scaled8 x(scale), y(scale), z(scale);
} Vector3s8<read=Vector3s8_read,optimize=false>;

string Vector3s8_read(const Vector3s8 &vec)
{
    local string out;
    SPrintf(out, "%s; %s; %s",
        scaled8_read(vec.x),
        scaled8_read(vec.y),
        scaled8_read(vec.z));
    return out;
}

typedef struct
{
    unsigned byte r,g,b,a;
} Color<read=Color_read,optimize=false>;

string Color_read(const Color &col)
{
    local string out;
    SPrintf(out, "%d;%d;%d;%d", col.r, col.g, col.b, col.a);
    return out;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vector3f<read=Vector3f_read>;

string Vector3f_read(const Vector3f &vec)
{
    local string out;
    SPrintf(out, "%.2f; %.2f; %.2f", vec.X, vec.Y, vec.Z);
    return out;
}

typedef struct
{
    Vector3f min;
    Vector3f max;
} Box<read=Box_read>;

string Box_read(const Box &box)
{
    local string out;
    SPrintf(out, "(%s) (%s)", Vector3f_read(box.min), Vector3f_read(box.max));
    return out;
}

typedef uint32 string_offset<format=hex,comment=string_offset_comment>;
string string_offset_comment(string_offset &ofs)
{
    local string out;
    SPrintf(out, "%s", ReadString(addrBase + ofs));
    return out;
}

string getTableName(uint32 name_offset)
{
    return ReadString(name_offset + tableNamesBase);
}

typedef struct
{
    uint32 addr<format=hex>;
    uint32 name_offset<format=hex>;
} TableInfo<read=TableInfo_read>;

string TableInfo_read(TableInfo &table)
{
    local string out;
    SPrintf(out, "%s / %x", getTableName(table.name_offset), table.addr);
    // #todo-worldData: dynamically get this base value
    return out;
}

typedef struct
{
    uint32 positionOffset<format=hex>;
    uint32 normalOffset<format=hex>;
    uint32 colorCount<format=hex>;
    uint32 colorOffset0<format=hex>;
    uint32 colorOffset1<format=hex>; // broken, see 800203A4
    uint32 textureCoordinateCount<format=hex>;
    uint32 textureCoordinateOffset[8]<format=hex>;
    uint32 unk_38<format=hex>;
    uint32 unk_3C<format=hex>;
    uint32 unk_40<format=hex>;
    uint32 positionQuantizationShift<format=hex>; // Power of 2
    uint32 textureCoordinateQuantizationShift[8]<format=hex>;
} VCDTable;

typedef struct
{
    string_offset versionString;
    uint32 sceneGraphRootOffset<format=hex>;
    string_offset sgNodeAString;
    string_offset sgNodeBString;
    
    if (string_offset_comment(information.versionString) != "ver1.00")
    {
        string_offset dateString;
    }
} InformationTable;

typedef struct
{
    uint32 wFogEnabled;
    uint32 fogMode;
    float fogStart;
    float fogEnd;
    Color fogColor;
} FogTable;

typedef struct
{
    uint32 count;
    if (count > 0)
        string_offset textures[count];
} TextureTable;

typedef struct
{
    string_offset name;
    uint32 unk_04<format=hex>;
    uint16 wWidth;
    uint16 wHeight;
    uint32 unk_0c<format=hex>;
} Texture<read=Texture_Read>;

string Texture_Read(const Texture &val)
{
    local string out;
    SPrintf(out, "%s", string_offset_comment(val.name));
    return out;
}

typedef struct
{
    uint32 textureOffset<format=hex>;
    uint32 unk_04<format=hex>;
    uint8 wrapS<format=hex>;
    uint8 wrapT<format=hex>;
    uint8 unk_0a<format=hex>;
    uint8 unk_0b<format=hex>;
    
    if (textureOffset)
    {
        local uint oldPos = FTell();
        FSeek(addrBase + textureOffset);
        Texture texture;
        FSeek(oldPos);
    }
} Sampler;

typedef struct
{
    uint8 tevMode; // used in mapSetMaterialTev
    uint8 unk_01;
    uint8 unk_02;
    uint8 unk_03;
    uint32 unk_04;
    uint32 unk_08;
} TevConfig<read=TevConfig_read>;

string TevConfig_read(const TevConfig &val)
{
    local string out;
    SPrintf(out, "%d", val.tevMode);
    return out;
}

typedef struct
{
    string_offset name;
    Color color;
    uint8 matSrc<format=hex>; // mat_src in GXSetChanCtrl
    uint8 unk_009<format=hex>;
    uint8 unk_00a<format=hex>; // referenced in _mapEnt
    uint8 numTextures<format=hex>; // type?
    uint32 textureSamplerOffsets[8]<format=hex>;
    
    struct
    {
        float translateX;
        float translateY;
        float scaleX;
        float scaleY;
        float rotateZ;
        float warpX;
        float warpY;
    } texCoordTransforms[8];
    
    Color blendAlphaModulationR; // Red channel modulated into alpha of blend color in _mapDispMapObj
    uint32 pTevConfig<format=hex>; // fed into 

    local uint oldPos;
    if (numTextures)
    {
        oldPos = FTell();
        struct
        {
            local uint i;
            for (i = 0; i < numTextures; ++i)
            {
                FSeek(addrBase + textureSamplerOffsets[i]);
                Sampler samplers<optimize=false>;
            }
            FSeek(oldPos);
        } textureSamplers;
    }

    if (pTevConfig)
    {
        oldPos = FTell();
        FSeek(addrBase + pTevConfig);
        TevConfig tevConfig;
        FSeek(oldPos);
    }
} Material<read=Material_read>;

string Material_read(const Material &val)
{
    local string out;
    SPrintf(out, "%s / %d / %s", string_offset_comment(val.name), val.numTextures, TevConfig_read(val.tevConfig));
    return out;
}

typedef struct
{
    uint32 count;
    if (count > 0)
    {
        struct
        {
            string_offset name;         // mat name
            uint32 offset<format=hex>;  // mat offset
        } materialNames[count];
    }
} MaterialNameTable;

typedef struct
{
    string_offset name;
    string_offset type;
    Vector3f position;
    Vector3f rotation;
    Vector3f scale;
    Color color;
    float spotAngleFullDegrees;
    float angularAttenuation;
    uint32 distanceAttenuationType;
    uint32 wFlags<format=hex>;
    uint32 wEnableFlagsIf012d60d8;
} Light;

typedef struct
{
    uint32 count;
    if (count > 0)
        uint32 lightOffsets[count]<format=hex>;
} LightTable;

typedef struct
{
    uint32 count;
} CurveTable;

typedef struct
{
    float value;
    // These tangents are multiplied at runtime with the time between keyframes,
    // making them the real slope of the time-stretched curve you will see
    float tangentIn;
    float tangentOut;
    float unk_0c;
    uint32 bStep; // if non-zero, value will not be interpolated
} ValueKeyframe;

typedef struct
{
    string_offset target_name;
    float anim_origin[3];
    float anim_rotation[3];
    float anim_scale[3];
    float unk_28[3];
    float unk_34[3];
    float unk_40[3];
    float unk_4c[3];
    uint32 keyframeCount;
    struct
    {
        float time;
        ValueKeyframe translation[3];
        ValueKeyframe rotation[3];
        ValueKeyframe scale[3];
        ValueKeyframe unk_b8[3];
        ValueKeyframe unk_f4[3];
        ValueKeyframe unk_130[3];
        ValueKeyframe unk_16c[3];
    } keyframes[keyframeCount];
} AnimationJointTransformTrack;

typedef struct
{
    string_offset material_name;
    uint32 samplerIndex;
    float skewX;
    float skewY;
    uint32 keyframeCount;
    struct
    {
        float time;
        ValueKeyframe translationX;
        ValueKeyframe translationY;
        ValueKeyframe scaleX;
        ValueKeyframe scaleY;
        ValueKeyframe rotateZ;
    } keyframes[keyframeCount];
} AnimationMaterialUvTrack;

typedef struct
{
    // Incomplete, modifies blend color adjustment at material+0x10c
    string_offset material_name;
    uint32 keyframeCount;
    struct
    {
        float time;
        ValueKeyframe rgba[4];
    } keyframes[keyframeCount];
} AnimationMaterialBlendAlphaTrack;

typedef struct
{
    string_offset light_name;
    uint32 keyframeCount;
    struct
    {
        float time;
        ValueKeyframe translation[3];
        ValueKeyframe rotation[3];
        ValueKeyframe scale[3];
    } keyframes[keyframeCount];
} AnimationLightTransformTrack;

typedef struct
{
    string_offset light_name;
    uint32 keyframeCount;
    struct
    {
        float time;
        ValueKeyframe color[3];
        ValueKeyframe spotAngle;
        ValueKeyframe angularAttenuation;
    } keyframes[keyframeCount];
} AnimationLightParameterTrack;

typedef struct
{
    string_offset name;
    uint32 unk_04<format=hex>;
    float lengthFrames<format=hex>; // animation length
    uint32 pJointTransformAnimationTable<format=hex>;
    uint32 pMaterialUvAnimationTable<format=hex>;
    uint32 pMaterialBlendAlphaAnimationTable<format=hex>; // material blend color at +0x10c
    uint32 pLightTransformAnimationTable<format=hex>; // light position and rotation
    uint32 pLightParameterAnimationTable<format=hex>; // light color, spot angle and angular attenuation
    uint32 unk_20<format=hex>;
    uint32 unk_24<format=hex>;

    local uint oldPos;
    if (pJointTransformAnimationTable)
    {
        oldPos = FTell();
        FSeek(addrBase + pJointTransformAnimationTable);
        struct
        {
            uint32 entryCount;
            if (entryCount)
            {
                uint32 entryOffsets[entryCount]<format=hex>;
                local uint oldPos = FTell();
                local uint i = 0;
                for (i = 0; i < entryCount; ++i)
                {
                    FSeek(addrBase + entryOffsets[i]);
                    AnimationJointTransformTrack track;
                }
                FSeek(oldPos);
            }
        } jointTransformAnimationTable;
        FSeek(oldPos);
    }

    if (pMaterialUvAnimationTable)
    {
        oldPos = FTell();
        FSeek(addrBase + pMaterialUvAnimationTable);
        struct
        {
            uint32 entryCount;
            if (entryCount)
            {
                uint32 entryOffsets[entryCount]<format=hex>;
                local uint oldPos = FTell();
                local uint i = 0;
                for (i = 0; i < entryCount; ++i)
                {
                    FSeek(addrBase + entryOffsets[i]);
                    AnimationMaterialUvTrack track;
                }
                FSeek(oldPos);
            }
        } materialUvAnimationTable;
        FSeek(oldPos);
    }

    if (pMaterialBlendAlphaAnimationTable)
    {
        oldPos = FTell();
        FSeek(addrBase + pMaterialBlendAlphaAnimationTable);
        struct
        {
            uint32 entryCount;
            if (entryCount)
            {
                uint32 entryOffsets[entryCount]<format=hex>;
                local uint oldPos = FTell();
                local uint i = 0;
                for (i = 0; i < entryCount; ++i)
                {
                    FSeek(addrBase + entryOffsets[i]);
                    AnimationMaterialBlendAlphaTrack track;
                }
                FSeek(oldPos);
            }
        } materialBlendAlphaAnimationTable;
        FSeek(oldPos);
    }
    
    if (pLightTransformAnimationTable)
    {
        oldPos = FTell();
        FSeek(addrBase + pLightTransformAnimationTable);
        struct
        {
            uint32 entryCount;
            if (entryCount)
            {
                uint32 entryOffsets[entryCount]<format=hex>;
                local uint oldPos = FTell();
                local uint i = 0;
                for (i = 0; i < entryCount; ++i)
                {
                    FSeek(addrBase + entryOffsets[i]);
                    AnimationLightTransformTrack track;
                }
                FSeek(oldPos);
            }
        } lightTransformAnimationTable;
        FSeek(oldPos);
    }

    if (pLightParameterAnimationTable)
    {
        oldPos = FTell();
        FSeek(addrBase + pLightParameterAnimationTable);
        struct
        {
            uint32 entryCount;
            if (entryCount)
            {
                uint32 entryOffsets[entryCount]<format=hex>;
                local uint oldPos = FTell();
                local uint i = 0;
                for (i = 0; i < entryCount; ++i)
                {
                    FSeek(addrBase + entryOffsets[i]);
                    AnimationLightParameterTrack track;
                }
                FSeek(oldPos);
            }
        } lightParameterAnimationTable;
        FSeek(oldPos);
    }
} Animation;

typedef struct
{
    uint32 count;
    if (count > 0)
        uint32 animationOffsets[count]<format=hex>;
} AnimationTable;

// ---------------------------------- Main file start
// Order of packing into file:
// - Main header
// - "information" table
// - Texture[] table (referenced by Sampler)
// - Sampler[] table (referenced by Material)
// <align to 0x20>
// - vertex position data referenced by vcd_table
// <align to 0x20>
// - vertex normal data referenced by vcd_table
//
// <align to 0x20>
// - texture coordinate data 0 referenced by vcd_table
// <align to 0x20>
// - texture coordinate data 1 referenced by vcd_table
// <repeat for all used texture coordinate data slots>
// 
// <align to 0x20>
// - color data (referenced by vcd_table)
// - Material[] table (referenced by material_name_table)

// <align to 0x20>
// - Polygon data for following Mesh (referenced by Mesh) (size aligned upwards to 0x20)
// - Mesh (size aligned upwards to 0x20)
// - Repeat for all meshes (referenced by joints)

// - Joints serialized in preorder DFS
// - vcd_table
// - material_name_table
// - light_table
// - Light data referenced by light_table
// - fog_table
// - texture_table
// - curve_table
// - animation_table
// - Animation[] table referenced by animation_table
// - For each entry in Animation[] table:
//   - Mesh track table if present
//     - AnimMeshTracks referenced by said mesh track table in order
//   - Material track table if present
//     - AnimMaterialTracks referenced by said material track table in order
// Presumed: [- Track type C table if present - Referenced tracks]
//   - Track type D table if present
//     - type D tracks referenced by said table in order
//   - Track type E table if present
//     - type E tracks referenced by said table in order
// - Mandatory render data referenced by Joint+0x58 starting with polySurface448_q00141
// [possible other data]
// - TevConfig data referenced by Material
// - String data
// <align to 0x20>
// - Pointer table referenced by initial header
// - TableInfo[] table referenced by initial header
// - table names for above table referenced by TableInfo[]

struct {
    uint32 fileSize<format=hex>;
    uint32 offsetTableOffset<format=hex>; // This offset is from header end.
    uint32 offsetCount;
    uint32 tableCount;
    uint32 unk[4];
} header;

addrBase = FTell();

FSeek(addrBase + header.offsetTableOffset); // Table of all offsets. Game reads these and converts them to pointers so it can parse them normally.
uint32 offsetTable[header.offsetCount]<format=hex>;

// offset coloring
local uint i;
local uint cOrange = 0x0080ff;
struct
{
    local uint oldPos = FTell();
    for (i = 0; i < header.offsetCount; ++i)
    {
        FSeek(addrBase + offsetTable[i]);
        SetBackColor(cOrange);
        uint32 relocated;
    }
    FSeek(oldPos);
    SetBackColor(cNone);
} relocated;

TableInfo tables[header.tableCount];
tableNamesBase = FTell();

for (i = 0; i < header.tableCount; ++i)
{
    FSeek(addrBase + tables[i].addr);
    if (getTableName(tables[i].name_offset) == "vcd_table")
    {
        VCDTable vcd_table;
    }
    else if (getTableName(tables[i].name_offset) == "information")
    {
        InformationTable information;
        local string version = string_offset_comment(information.versionString);
    }
    else if (getTableName(tables[i].name_offset) == "light_table")
    {
        LightTable light_table;
    }
    else if (getTableName(tables[i].name_offset) == "material_name_table")
    {
        MaterialNameTable material_name_table;
    }
    else if (getTableName(tables[i].name_offset) == "fog_table")
    {
        FogTable fog_table;
    }
    else if (getTableName(tables[i].name_offset) == "texture_table")
    {
        TextureTable texture_table;
    }
    else if (getTableName(tables[i].name_offset) == "curve_table")
    {
        CurveTable curve_table;
    }
    else if (getTableName(tables[i].name_offset) == "animation_table")
    {
        AnimationTable animation_table;
    }
}

if (exists(vcd_table))
{

    if (vcd_table.positionOffset)
    {
        FSeek(addrBase + vcd_table.positionOffset);
        struct
        {
            uint32 count;
            Vector3s16 positions(vcd_table.positionQuantizationShift)[count];
        } positionData;
    }
    
    if (vcd_table.colorOffset0)
    {
        FSeek(addrBase + vcd_table.colorOffset0);
        struct
        {
            uint32 count;
            Color colors[count];
        } colorData;
    }
    
    if (vcd_table.normalOffset)
    {
        FSeek(addrBase + vcd_table.normalOffset);
        struct
        {
            uint32 count;
            Vector3s8 normalData(6)[count]; // constant quantization scale, see 80020360
        } normalData;
    }
    
    if (vcd_table.textureCoordinateOffset[0])
    {
        FSeek(addrBase + vcd_table.textureCoordinateOffset[0]);
        struct
        {
            uint32 count;
            Vector2s16 textureCoordinates(vcd_table.textureCoordinateQuantizationShift[0])[count];
        } textureCoordinateData;
    }

}

if (light_table.count > 0)
{
    FSeek(light_table.lightOffsets[0]);

    struct
    {
        local uint lightIdx;
        for (lightIdx = 0; lightIdx < light_table.count; ++lightIdx)
        {
            FSeek(addrBase + light_table.lightOffsets[lightIdx]);
            Light light;
        }
    } lightData;
}

if (animation_table.count > 0)
{
    FSeek(animation_table.animationOffsets[0]);

    struct
    {
        local uint animIdx;
        for (animIdx = 0; animIdx < animation_table.count; ++animIdx)
        {
            FSeek(addrBase + animation_table.animationOffsets[animIdx]);
            Animation animation;
        }
    } animationData;
}

if (material_name_table.count > 0)
{
    FSeek(addrBase + material_name_table.materialNames[0].offset);

    struct
    {
        local uint materialIdx;
        for (materialIdx = 0; materialIdx < material_name_table.count; ++materialIdx)
        {
            FSeek(addrBase + material_name_table.materialNames[materialIdx].offset);
            Material material;
        }
    } materialData;
}

struct SceneGraphNode;
typedef SceneGraphNode SceneGraphNode_t;

uint getBitCount(uint32 mask)
{
    local uint out = 0;
    local uint i;
    for (i = 0; i < 32; ++i)
    {
        if (mask & (1 << i))
        {
            ++out;
        }
    }
    return out;
}

typedef struct(local uint mask)
{
    // position
    // normal
    // tex coord 0-7
    // color 0-1
    if (mask & 0x001)
        uint16 positionIndex;
    if (mask & 0x002)
        uint16 normalIndex;
    if (mask & 0x004)
        uint16 colorIndex0;
    if (mask & 0x008) // broken
        uint16 colorIndex1;
    if (mask & 0x010)
        uint16 textureCoordinateIndex0;
    if (mask & 0x020)
        uint16 textureCoordinateIndex1;
    if (mask & 0x040)
        uint16 textureCoordinateIndex2;
    if (mask & 0x080)
        uint16 textureCoordinateIndex3;
    if (mask & 0x100)
        uint16 textureCoordinateIndex4;
    if (mask & 0x200)
        uint16 textureCoordinateIndex5;
    if (mask & 0x400)
        uint16 textureCoordinateIndex6;
    if (mask & 0x800)
        uint16 textureCoordinateIndex7;
} Vertex<optimize=false>;

typedef struct
{
    local uint32 effectiveElementMask;
    if (parentof(parentof(this)).bPolygonsAreDisplayLists) // Not true in ver1.00 only
    {
        uint8 drawOpcode<format=hex>; // triangle strip opcode for display list
        uint16 vertexCount;
        effectiveElementMask = parentof(parentof(this)).elementMask;
    }
    else
    {
        uint32 vertexCount;
        effectiveElementMask = 0xFFF;
    }
    Vertex vertices(effectiveElementMask)[vertexCount];
} Polygon<optimize=false>; // Official name is Geometry based on unused function mapSetPolygonGeometry

typedef struct
{
    byte unk_00;
    byte unk_01;
    byte unk_02;
    byte bPolygonsAreDisplayLists;
    
    int32 polygonCount; // Signed according to compares (e.g. _hitEnt)
    // This looks to be a flagsfield of the present components.
    // 0x1 = vertex ID
    
    uint32 elementMask<format=hex>;
    uint32 vcdTableOffset<format=hex>; // Which VCD table to index into I guess

    struct
    {
        uint32 offset<format=hex>;

        if (bPolygonsAreDisplayLists)
        {
            uint32 size<format=hex>;    // Padded to 16 byte alignment
        }

        local uint32 oldPos = FTell();

        FSeek(addrBase + offset);
        Polygon data;

        FSeek(oldPos);
    } polygonInfo[polygonCount]<optimize=false>;
} Mesh; // Official name for Mesh is Polygon based on mapSetPolygon

typedef struct SceneGraphNode
{
    string_offset name;
    string_offset type;
    uint32 parentOffset<format=hex>;
    uint32 childOffset<format=hex>;
    uint32 nextOffset<format=hex>;
    uint32 prevOffset<format=hex>;
    Vector3f scale;
    Vector3f rotation;
    Vector3f translation;
    /*if ((scale.X != scale.Y || scale.X != scale.Z) && (rotation.X != 0 || rotation.Y != 0 || rotation.Z != 0))
    {
        Printf("Non-uniform scale with rotation, SHEAR for %s @ 0x%x!\n", string_offset_comment(name), FTell());
    }*/
    Box    bbox;
    uint32 unk_54;
    uint32 unk_offset<format=hex>;
    uint32 meshCount;

    if (meshCount > 0)
    {
        struct
        {
            uint32 materialOffset<format=hex>;
            uint32 meshOffset<format=hex>;
        } meshDescriptors[meshCount];
    }

    local uint32 strucEndPos = FTell();

    if (unk_offset != 0)
    {
        local uint oldPos = FTell();
        FSeek(addrBase + unk_offset);
            
        struct
        {
            uint8 unk_00;
            uint8 cullMode; // front, back, all, none
            // 0x1 set -> Bit 3 of MOBJ flags set
            // 0x2 set -> Bit 4 of MOBJ flags set
            // 0x8 set -> no shadow calc in _mapLoad at bottom,
            //            find near light
            // 0x10 set -> Bit 15 of MOBJ flags set
            unsigned byte wFlags;
            unsigned byte padding;
            uint32 lightMask; // shadow related? skips in _mapLoad at bottom
            uint32 hitAttributes;
            uint32 unk_0c;
            uint32 unk_10;
        } unk_data_mandatory;
        FSeek(oldPos);
    }

    if (meshCount)
    {
        oldPos = FTell();
        struct
        {
            FSeek(addrBase + meshDescriptors[0].meshOffset);
            local uint i;
            for (i = 0; i < meshCount; ++i)
            {
                FSeek(addrBase + meshDescriptors[i].meshOffset);
                Mesh meshes<optimize=false>;
            }
            FSeek(oldPos);
        } meshes;
    }

    if (childOffset)
    {
        FSeek(addrBase + childOffset);
        SceneGraphNode_t child;
    }
    if (nextOffset)
    {
        FSeek(addrBase + nextOffset);
        SceneGraphNode_t next;
    }

    FSeek(strucEndPos);
} SceneGraphNode_t<optimize=false>;

FSeek(addrBase + information.sceneGraphRootOffset);
SceneGraphNode screenGraphRoot;